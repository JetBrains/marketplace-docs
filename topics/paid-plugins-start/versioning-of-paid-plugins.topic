<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE topic  SYSTEM 'https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd'><topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd" title="Versioning of Paid Plugins" id="versioning-of-paid-plugins">

    <p>We would like to be as flexible as possible with respect to the versioning models our plugin authors employ, and
        we don't intend to lock you into ours. We have, however, implemented a few constraints that are designed to
        unify the versioning models and prevent issues that may arise from non-standard versioning schemes and licensing
        mechanisms.
    </p>
    <p>To make it easier for you to keep your versioning consistent with our guidelines, we’d like to tell you more
        about how the releases of our products – and many plugins – are versioned.
    </p>
    <p>There are two versioning parameters that you should be aware of:</p>
    <list>
        <li>
            <code>release-version</code>
            – the major version, which is closely related to the licensing model
        </li>
        <li>
            <code>version</code>
            – the build number that is used by the IDE and JetBrains Marketplace
        </li>
    </list>

    <chapter title="Release-version vs. Version">
        <p>We use the <code>version</code> parameter to identify the latest update of the plugin that is compatible with
            your IDE, which allows us to suggest installing the appropriate version. Keep in mind that SemVer (Semantic
            Versioning) is turned on by default for all new plugins. For more information see <a href="semver.topic">
                Semantic
                Versioning</a>.
        </p>
        <p>In addition to the <code>version</code> parameter, <a href="add-required-parameters.topic">the changes</a> you
            make
            for paid plugins specifically introduces the <code>release-version</code> parameter, which pertains to the
            licensing of paid plugins. It identifies what is considered to be a major release, and it is tied to the
            release-date. For example:
        </p>
        <code-block lang="xml">
                <![CDATA[
                <instance-descriptor code="PTESTPLUGIN" release-date="20210818" release-version="20211"/>
                <version>2021.1.1</version>
                ]]>
            </code-block>
        <note>
            <p>Please keep in mind that the <code>version</code> parameter can be skipped in the source <a href="https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html">plugin.topic
            </a> file if the Gradle <a href="https://plugins.jetbrains.com/docs/intellij/tools-gradle-intellij-plugin.html#tasks-patchpluginxml-version">
                patchPluginXml
            </a> task is enabled and configured.
            </p>
        </note>

        <p>This example can be considered our initial plugin upload, so it is labeled as a major release. When we upload
            any
            minor updates, we keep the release-version untouched and only increment the version:
        </p>
        <code-block lang="xml">
                <![CDATA[
                <instance-descriptor code="PTESTPLUGIN" release-date="20210818" release-version="20211"/>
                <version>2021.1.2</version>
                ]]>
            </code-block>

    </chapter>

    <chapter title="Release-version constraints">
        <p>Your <code>release-version</code> must meet the following conditions:
        </p>
        <list>
            <li>It must be an <code>integer</code> (dots or other special symbols are allowed but will be ignored).
            </li>
            <li>Each <code>release-version</code> must be greater than the previous one (they can't be descending).
            </li>
            <li>It must contain at least 2 digits, as it will be split into 2 numbers, the second of which will contain
                only
                one digit. If, for example, <code>release-version=20211</code>, the first number would be <code>2021
                </code> and
                the second number would be <code>1</code>.
            </li>
            <li>The first 2 digits of <code>release-version</code> must match with the <code>version</code> parameter,
                like <code>
                    release-version=20211
                </code> and
                <code>version=2021.1.1.</code>
            </li>
        </list>
        <tip>
            <p>Since <code>release-version</code> is an integer, the <control>2021.1</control> version will be converted
                to <control>
                    20211
                </control> when compared/used by the IDE. You can enter it as <control>20211</control> in your
                plugin.topic from
                the very beginning.
            </p>
        </tip>
        <p>Obviously, our intention is not to limit your versioning scheme to the YYYY.R format. Feel free to use the
            system
            that works best for you. Please just make sure it meets release-version conditions described above.
        </p>
    </chapter>
    <p>Even though the difference between the <code>release-version</code> and <code>version</code> parameters might
        initially seem a bit complex, we hope this article sheds some light on how to manage them successfully. If you
        still have any questions about these parameters or versioning in general, do not hesitate to contact us at <a href="mailto:marketplace@jetbrains.com">marketplace@jetbrains.com</a>.
    </p>
</topic>