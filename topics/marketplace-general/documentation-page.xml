<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/stardust/html-entities.dtd">
<topic xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/stardust/topic.v2.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="documentation-page" title="Documentation Page">

    <p>If your plugin requires more than just a landing page with a list of features, add user-facing documentation as a help instance.</p>
    <p>Unlike <a href="custom-pages.xml">Custom pages</a>, the Documentation page is not a single page but a full-fledged help instance with a structure, table of contents, in-topic navigation, and the ability to <a href="https://plugins.jetbrains.com/plugin/20158-writerside/docs/configure-search.html">set up a search feature</a> like the one you're reading right now. You can see some more examples here: <a href="https://plugins.jetbrains.com/plugin/16136-grazie-professional/docs">Grazie Professional</a>, <a href="https://plugins.jetbrains.com/plugin/8182-rust/docs">Rust</a>, and <a href="https://plugins.jetbrains.com/plugin/10081-edutools/docs">Edu Tools</a>.</p>


    <p>If you’re questioning why you should invest effort into writing documentation for your plugin, here are a few arguments for doing so:</p>
    <list>
        <li>Documentation makes your plugin more discoverable and searchable. When product documentation is online, external search engines will bring it to everyone who types the keywords into the search query.</li>
        <li>Documentation helps you effectively communicate the features of a plugin, allowing your users to understand how it works from the start.</li>
        <li>Documentation is a good way to support your current users. If they find answers in the documentation, this will decrease your support load, which is crucial for smaller teams. Good documentation also often translates to a higher rating for the plugin.</li>
    </list>

    <chapter id="create-documentation-for-your-plugin" title="Create documentation for your plugin">
        <p>To create documentation for your plugin, install the <a href="https://plugins.jetbrains.com/plugin/20158-writerside">Writerside</a> plugin for IntelliJ IDEs and start writing inside your development environment.</p>
        <p>You can combine the simplicity of Markdown with fully structured semantic markup like collapsible chapters, code blocks, snippets with filters, tabs, and much more. On top of all that, it has a built-in live preview that displays the docs in the way they’ll appear on the web, while also offering the ability to build docs locally.</p>

        <p>For more detailed information about the installation and documentation creation process, please refer to the <a href="https://plugins.jetbrains.com/plugin/20158-writerside/docs">Writerside plugin help</a>.</p>
        <p>Alternatively, you can use this quick step-by-step guide:</p>
        <procedure id="create-plugin-docs">
            <step>Install the <a href="https://plugins.jetbrains.com/plugin/20158-writerside/docs">Writerside plugin</a>.</step>
            <step><a href="https://plugins.jetbrains.com/plugin/20158-writerside/docs?preview=true#set-up-new-project">Create a documentation project</a> alongside your plugins' code repository or in a separate docs repository.</step>
            <step>Write the <a href="https://plugins.jetbrains.com/plugin/20158-writerside/custom-pages/docs/topics.html">content</a> with the help of <a href="https://plugins.jetbrains.com/plugin/20158-writerside/custom-pages/docs/use-live-templates-for-markup-elements.html">templates</a>, <a href="https://plugins.jetbrains.com/plugin/20158-writerside/custom-pages/docs/getting-started.html#preview_topic">live preview</a>, and writing assistance.</step>
            <step><a href="https://plugins.jetbrains.com/plugin/20158-writerside/custom-pages/docs/deploy-docs-to-github-pages.html">Build and publish</a> the result.</step>
        </procedure>
    </chapter>
    <chapter id="publish-documentation" title="Publish documentation via TeamCity Cloud">
        <p>There are a few ways to build and publish your documentation with Writerside: locally, on GitHub/GitLab, or using TeamCity Cloud.</p>
        <p>We recommend using <a href="https://www.jetbrains.com/teamcity/cloud/">TeamCity Cloud</a>  to build a documentation instance. TeamCity run configurations include more than 100 automated tests that run during the build to check the integrity and quality of your content, as well as a detailed build log to let you know if something goes wrong.
        </p>
        <procedure id="publish-plugin-docs">
            <step>When your content is ready for publication, <a href="https://plugins.jetbrains.com/plugin/20158-writerside/custom-pages/docs/local-build.html">build an instance locally</a> to generate a ZIP archive.</step>
            <step>Send us your plugin's ID (for example, here is the link to <a href="https://plugins.jetbrains.com/plugin/20158-writerside/">Writerside</a> plugin and, in this case, the plugin ID is 20158), a link to your public repository, and a ZIP archive name to our team via email <a href="mailto:writerside@jetbrains.com">writerside@jetbrains.com</a>.</step>
            <step>Our team will create the TeamCity build configuration and send the link to you.</step>
            <step>You will be able to <a href="https://plugins.jetbrains.com/plugin/20158-writerside/custom-pages/docs/build-on-teamcity.html">build the documentation</a>, then publish it to staging.</step>
            <step><p>The documentation will appear in the Custom Pages section of the plugins' page.</p>
                <img src="documentation_page.png" alt="Documentation pages view" width="800" border-effect="line"/>
                <p>Click <emphasis>Preview</emphasis> to see how users will see it.</p>
            </step>
            <step>Go back to the TeamCity build results and promote the docs to production.</step>
        </procedure>
    </chapter>
</topic>